/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 29.02.2024 02:39:34

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 6640;
#else
constexpr int kTensorArenaSize = 5616;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,650 } };
const ALIGN(16) float tensor_data1[8] = { -0.71517187356948853, -0.18088749051094055, -0.37053236365318298, -0.48601105809211731, 0.063145622611045837, -0.53074198961257935, -0.60310691595077515, -0.38028761744499207, };
const TfArray<1, int> tensor_dimension1 = { 1, { 8 } };
const ALIGN(16) float tensor_data2[16] = { -0.44663828611373901, -0.29257270693778992, -0.10508504509925842, 0.16272673010826111, -0.009600427933037281, -0.11783020198345184, -0.029572801664471626, -0.27800384163856506, 0.047521289438009262, -0.23033636808395386, 0.067481234669685364, 0.15786053240299225, -0.065167419612407684, -0.063596613705158234, -0.51924759149551392, 0.021359950304031372, };
const TfArray<1, int> tensor_dimension2 = { 1, { 16 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 50, 13, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 50, 1, 8, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data5[4] = { 1, 1, 25, 8, };
const TfArray<1, int> tensor_dimension5 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data6[4] = { 1, 25, 1, 16, };
const TfArray<1, int> tensor_dimension6 = { 1, { 4 } };
const ALIGN(16) float tensor_data7[8*1*3*13] = { 
  /* [0][0][][] */ -0.033742591738700867,0.25368037819862366,-0.24148017168045044,-0.074266880750656128,-0.18022279441356659,0.046754341572523117,0.31597721576690674,-0.14289312064647675,-0.064376465976238251,-0.081122025847434998,0.33553701639175415,-0.37366560101509094,0.20953872799873352, -0.31549552083015442,-0.30154427886009216,-0.031140729784965515,0.052544258534908295,0.048265844583511353,0.063949443399906158,-0.21631540358066559,0.36484786868095398,-0.026132412254810333,-0.0093074273318052292,0.15650387108325958,0.0017257906729355454,0.43567052483558655, -0.053332939743995667,-0.18077139556407928,0.052846454083919525,-0.20168198645114899,0.08619225025177002,-0.069980047643184662,0.226490318775177,-0.063032157719135284,0.16599351167678833,-0.1001398116350174,0.28878182172775269,-0.03610457107424736,0.20869344472885132, 
  /* [1][0][][] */ -0.47632661461830139,-0.27674576640129089,-0.14672054350376129,-0.20743410289287567,-0.24545706808567047,-0.25758340954780579,-0.1014021560549736,-0.047377593815326691,0.032635077834129333,0.0084356777369976044,0.0069525451399385929,0.13612793385982513,0.47233080863952637, -0.63293641805648804,0.11507153511047363,0.17337919771671295,0.046433400362730026,0.093861006200313568,0.10644426196813583,0.19093002378940582,-0.02411700040102005,-0.16087459027767181,0.10203666239976883,-0.20224332809448242,-0.28091427683830261,-0.081777408719062805, -0.41010996699333191,0.13900890946388245,0.18717630207538605,0.039766725152730942,0.061866387724876404,-0.088946893811225891,-0.12974949181079865,-0.021020324900746346,0.081692293286323547,0.025571517646312714,-0.22971779108047485,-0.023704094812273979,0.085504010319709778, 
  /* [2][0][][] */ 0.55272668600082397,-0.20307092368602753,-0.32724401354789734,-0.21101100742816925,-0.081381224095821381,-0.44129151105880737,0.069909580051898956,0.24425524473190308,0.062340788543224335,0.09918367862701416,0.16206501424312592,0.13384163379669189,0.042704794555902481, -0.43728235363960266,-0.016896935179829597,0.089687131345272064,0.18175078928470612,-0.013273725286126137,0.094843767583370209,0.082956999540328979,0.13647598028182983,-0.089716494083404541,-0.14250588417053223,0.20446904003620148,-0.0057375566102564335,-0.25089401006698608, -0.67735767364501953,-0.36368703842163086,0.021145015954971313,0.014136888086795807,-0.075460180640220642,0.19241145253181458,-0.10456012934446335,0.076788969337940216,0.0041102049872279167,-0.13426370918750763,0.34041151404380798,-0.018868833780288696,-0.18766115605831146, 
  /* [3][0][][] */ 0.041276834905147552,-0.19281767308712006,0.28409510850906372,-0.19591903686523438,0.11186929047107697,-0.18458825349807739,0.39763116836547852,-0.44197502732276917,0.15461590886116028,-0.035383936017751694,-0.030123835429549217,-0.24198061227798462,-0.03998878225684166, 0.1191621720790863,0.20348571240901947,-0.37586286664009094,0.10022418200969696,-0.21001046895980835,0.12220154702663422,0.114266537129879,0.0075540319085121155,0.063717596232891083,0.047895051538944244,0.086996316909790039,0.13071760535240173,0.10955052822828293, -0.17126061022281647,-0.45119166374206543,0.42387193441390991,-0.15764372050762177,0.16867522895336151,-0.15273560583591461,0.31007888913154602,-0.22469758987426758,0.16320143640041351,0.14885890483856201,-0.28079897165298462,0.31042370200157166,-0.25309395790100098, 
  /* [4][0][][] */ 0.15199635922908783,0.0073551242239773273,0.14983774721622467,0.16785082221031189,-0.031116258352994919,-0.063853166997432709,-0.21591639518737793,-0.10711024701595306,-0.010262800380587578,-0.17143604159355164,-0.36464834213256836,0.058546669781208038,-0.21318839490413666, 0.32983991503715515,-0.055357437580823898,0.24989752471446991,-0.017218507826328278,-0.29092168807983398,-0.13991820812225342,-0.1816338449716568,0.079322673380374908,-0.11650242656469345,-0.27288550138473511,0.14233793318271637,-0.42028474807739258,-0.097365602850914001, 0.21198131144046783,0.047192834317684174,0.20974811911582947,-0.26776796579360962,-0.081761807203292847,0.3250848650932312,-0.076451763510704041,-0.17805980145931244,0.079067550599575043,-0.31065317988395691,-0.28710395097732544,0.19741512835025787,-0.28015235066413879, 
  /* [5][0][][] */ -0.017189688980579376,-0.0022817139979451895,-0.016631504520773888,-0.13589726388454437,0.031851977109909058,0.09425836056470871,-0.058168716728687286,-0.19118766486644745,-0.23127919435501099,0.066876225173473358,0.10785305500030518,0.053315162658691406,0.25093796849250793, 0.45749887824058533,0.13593824207782745,-0.18271246552467346,-0.098834961652755737,0.23593151569366455,0.2452797144651413,0.10571682453155518,-0.0016003074124455452,0.025817103683948517,0.13980649411678314,-0.19355344772338867,-0.34779798984527588,-0.1781248152256012, -0.27190828323364258,0.012406162917613983,-0.081943780183792114,0.027125125750899315,-0.073897950351238251,0.26687461137771606,-0.023331854492425919,-0.073690950870513916,0.27637526392936707,0.22588889300823212,-0.3426971435546875,-0.34431549906730652,0.074014820158481598, 
  /* [6][0][][] */ 0.018401596695184708,0.16622979938983917,-0.089613601565361023,0.18119454383850098,-0.2535673975944519,0.059289727360010147,-0.20887492597103119,-0.04898463562130928,-0.10633464157581329,-0.38839444518089294,-0.027822425588965416,0.20568063855171204,0.12897279858589172, -0.047403335571289062,-0.087339393794536591,-0.02335725724697113,-0.15620540082454681,0.49345898628234863,0.14775459468364716,0.1077728345990181,0.05861634761095047,-0.044640060514211655,0.024816771969199181,0.36517053842544556,-0.0013458923203870654,-0.35065266489982605, 0.11328830569982529,0.16600067913532257,0.10355644673109055,0.041964150965213776,0.077607817947864532,-0.0093727698549628258,0.12710753083229065,-0.15881145000457764,-0.15144295990467072,0.068540021777153015,-0.1017988994717598,0.35825780034065247,-0.075500361621379852, 
  /* [7][0][][] */ 0.62509924173355103,-0.060244936496019363,-0.050741139799356461,-0.0088223032653331757,0.22421820461750031,-0.17149212956428528,-0.18482670187950134,-0.14508286118507385,-0.089899502694606781,-0.098605863749980927,0.018153378739953041,0.30477812886238098,0.25047317147254944, -0.24228875339031219,-0.080067865550518036,0.071282684803009033,-0.047629188746213913,-0.11856396496295929,-0.25423499941825867,-0.14215029776096344,-0.17608392238616943,0.064624376595020294,-0.17699824273586273,0.16224157810211182,0.49343672394752502,0.22083801031112671, 0.043980341404676437,0.18441340327262878,0.28720849752426147,0.23323988914489746,0.034870844334363937,-0.0044699544087052345,0.10089097172021866,-0.04469526931643486,-0.1376442015171051,-0.28655272722244263,0.036363430321216583,0.20603810250759125,-0.14758852124214172, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 8,1,3,13 } };
const ALIGN(16) float tensor_data8[16*1*3*8] = { 
  /* [0][0][][] */ 0.34527039527893066,0.093130767345428467,0.15743838250637054,0.35887449979782104,-0.39645174145698547,-0.18645225465297699,-0.12786424160003662,-0.23902544379234314, 0.20180155336856842,0.010229579173028469,0.059335917234420776,-0.025356275960803032,-0.2136709988117218,-0.31614601612091064,-0.011804268695414066,-0.30772337317466736, 0.27286455035209656,0.15860116481781006,0.042345866560935974,0.033026766031980515,-0.41688486933708191,-0.24766889214515686,-0.048214055597782135,-0.21485358476638794, 
  /* [1][0][][] */ -0.231393963098526,0.053548127412796021,0.034383110702037811,0.046370893716812134,-0.12552836537361145,-0.16912178695201874,0.062397483736276627,0.033370129764080048, -0.060100466012954712,0.011046430096030235,-0.079288117587566376,-0.2984638512134552,0.20742873847484589,0.27297085523605347,0.18218618631362915,0.29232996702194214, 0.3296017050743103,-0.069991908967494965,0.084096275269985199,-0.20598854124546051,-0.15242958068847656,-0.098186507821083069,0.043441474437713623,0.085792005062103271, 
  /* [2][0][][] */ -0.18088370561599731,0.14128109812736511,-0.17841833829879761,-0.020379342138767242,-0.016069650650024414,-0.1567225307226181,-0.027118446305394173,0.10926547646522522, 0.16913360357284546,0.096712760627269745,0.30624118447303772,0.104922816157341,0.018918287009000778,-0.35211518406867981,-0.14129327237606049,0.10123010724782944, -0.29313865303993225,0.07565673440694809,-0.041527152061462402,-0.23626400530338287,-0.10804691910743713,-0.14033634960651398,0.15536332130432129,-0.13988153636455536, 
  /* [3][0][][] */ 0.008843601681292057,-0.44091799855232239,-0.3266778290271759,-0.011159855872392654,0.2259429395198822,-0.1018655002117157,-0.26964890956878662,0.10080007463693619, 0.29125210642814636,-0.5690690279006958,-0.44570964574813843,0.18079814314842224,-0.16719456017017365,-0.061153903603553772,-0.21630923449993134,0.013968897983431816, -0.044378384947776794,-0.54526078701019287,-0.3902793824672699,0.064990319311618805,0.34083646535873413,-0.078320816159248352,0.089585088193416595,-0.00653114914894104, 
  /* [4][0][][] */ -0.26838693022727966,0.06393539160490036,-0.12567618489265442,-0.15478603541851044,-0.04074154794216156,0.066201917827129364,-0.062261834740638733,0.092133857309818268, -0.26958486437797546,-0.22372373938560486,-0.050117544829845428,-0.2483694851398468,-0.1135774552822113,0.3391869068145752,-0.096552684903144836,0.12744471430778503, -0.070882260799407959,0.23605035245418549,0.39934530854225159,-0.17877873778343201,-0.11374673247337341,0.38316139578819275,-0.041699547320604324,0.025507044047117233, 
  /* [5][0][][] */ -0.19452963769435883,0.014705228619277477,0.20576390624046326,0.012945063412189484,0.015286127105355263,-0.44910711050033569,0.072661541402339935,0.32062840461730957, -0.44235065579414368,0.071633487939834595,0.059485863894224167,-0.1910526305437088,0.12200401723384857,0.33607220649719238,-0.35154822468757629,-0.24305067956447601, -0.21214891970157623,0.079997159540653229,0.0038240749854594469,-0.17169365286827087,0.13319353759288788,-0.031977593898773193,-0.35028395056724548,0.25072649121284485, 
  /* [6][0][][] */ 0.19648280739784241,-0.060345910489559174,-0.064162306487560272,0.41012692451477051,-0.26716423034667969,0.088360540568828583,-0.02937205508351326,-0.072121620178222656, 0.14108845591545105,-0.26339095830917358,-0.19453197717666626,-0.098773114383220673,-0.14711286127567291,-0.14256629347801208,0.039668571203947067,0.051789939403533936, -0.022029159590601921,0.0072518279775977135,-0.27653124928474426,0.27691775560379028,-0.24340905249118805,0.097284577786922455,-0.11366114765405655,-0.12318886071443558, 
  /* [7][0][][] */ -0.069796495139598846,0.049666821956634521,0.0001955799525603652,-0.41527149081230164,-0.098319485783576965,0.20233087241649628,0.23080788552761078,0.096719533205032349, -0.052346937358379364,0.22438594698905945,0.21798086166381836,-0.097162254154682159,0.018685167655348778,0.032198205590248108,0.22032210230827332,0.27058762311935425, -0.057352557778358459,-0.082736954092979431,-0.14263200759887695,-0.18250571191310883,0.11268623918294907,0.043022766709327698,0.18395347893238068,0.0084053399041295052, 
  /* [8][0][][] */ 0.24319522082805634,-0.42744055390357971,-0.099122904241085052,0.23909169435501099,0.058893274515867233,-0.19625656306743622,0.17116262018680573,0.072538226842880249, -0.15827512741088867,-0.27183794975280762,-0.33629551529884338,0.14194180071353912,0.30417081713676453,-0.14122043550014496,-0.41084620356559753,0.0017187148332595825, 0.072691403329372406,-0.23018185794353485,-0.047377642244100571,0.2900773286819458,-0.033750560134649277,0.025855962187051773,-0.087124980986118317,-0.12730403244495392, 
  /* [9][0][][] */ -0.0025084714870899916,-0.13032190501689911,0.27930569648742676,0.042985610663890839,-0.098710410296916962,0.27219924330711365,0.25838008522987366,0.085418447852134705, -0.16450288891792297,-0.27117344737052917,-0.083796210587024689,-0.11322194337844849,-0.13704890012741089,-0.013572500087320805,0.033442683517932892,0.25122565031051636, 0.078524097800254822,-0.017456892877817154,-0.0036674304865300655,0.17497797310352325,-0.18278780579566956,0.12504972517490387,-0.074604786932468414,0.3259107768535614, 
  /* [10][0][][] */ -0.45283371210098267,-0.0071068219840526581,-0.37738204002380371,0.36566320061683655,0.24033243954181671,0.062628366053104401,0.38285425305366516,-0.092280693352222443, -0.27416452765464783,-0.14827604591846466,-0.050997152924537659,0.051415536552667618,-0.24429149925708771,-0.053337268531322479,0.067565135657787323,-0.033024121075868607, -0.11455410718917847,-0.21551227569580078,-0.13987378776073456,0.1644122451543808,-0.38558423519134521,0.058585178107023239,-0.012564276345074177,0.041443981230258942, 
  /* [11][0][][] */ -0.32408064603805542,-0.47584834694862366,-0.53742146492004395,0.32043042778968811,0.20732270181179047,-0.084480039775371552,-0.11141212284564972,-0.16295763850212097, 0.0090411985293030739,-0.34054943919181824,-0.30826088786125183,0.072187505662441254,0.37630969285964966,-0.032573334872722626,-0.058808326721191406,-0.037763878703117371, 0.030883351340889931,-0.30256950855255127,-0.37058731913566589,0.16870518028736115,0.075240932404994965,-0.035854265093803406,-0.054452460259199142,-0.027179095894098282, 
  /* [12][0][][] */ -0.078526519238948822,-0.013381081633269787,-0.31977203488349915,0.1479000449180603,-0.28741997480392456,0.0098919682204723358,0.30119150876998901,-0.069895356893539429, 0.1430792510509491,-0.040202412754297256,-0.45543560385704041,-0.087088644504547119,-0.32304808497428894,0.31410422921180725,-0.17697978019714355,-0.11087453365325928, 0.14463232457637787,0.05669981986284256,0.0091820051893591881,0.099504396319389343,0.00092283851699903607,-0.46449568867683411,-0.29255086183547974,0.35341766476631165, 
  /* [13][0][][] */ -0.30681696534156799,0.028876256197690964,0.044546652585268021,-0.13705919682979584,-0.11765896528959274,0.50097775459289551,-0.24837835133075714,-0.15510699152946472, -0.092261873185634613,0.13895595073699951,-0.077730692923069,-0.24976424872875214,-0.03002217598259449,-0.025283671915531158,-0.15680146217346191,-0.38699418306350708, -0.28163537383079529,0.13582643866539001,0.12194409221410751,-0.20560792088508606,0.065622501075267792,-0.3261989951133728,-0.15290389955043793,0.42690077424049377, 
  /* [14][0][][] */ 0.25687670707702637,0.088534131646156311,0.065939262509346008,-0.13583843410015106,-0.14730234444141388,-0.075676828622817993,-0.070839427411556244,-0.46733510494232178, 0.35521769523620605,0.19288156926631927,0.27418416738510132,0.28943035006523132,-0.33064824342727661,-0.25549876689910889,-0.024018155410885811,-0.17692278325557709, 0.20614536106586456,-0.042902972549200058,-0.15561690926551819,0.27852821350097656,-0.17232438921928406,-0.14551623165607452,-0.10520604997873306,-0.40658473968505859, 
  /* [15][0][][] */ -0.13520033657550812,0.27855777740478516,0.12070078402757645,-0.140514075756073,-0.016146034002304077,-0.0059273103252053261,-0.30158445239067078,0.18080314993858337, -0.24325516819953918,-0.11507311463356018,0.13358780741691589,-0.20341384410858154,0.0165447648614645,-0.1944744735956192,0.30831053853034973,0.25470319390296936, -0.260750412940979,-0.15149426460266113,0.258930504322052,-0.087464369833469391,-0.09328257292509079,0.044093254953622818,0.24490617215633392,-0.029489297419786453, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,8 } };
const ALIGN(8) float tensor_data9[2] = { 0.062476225197315216, -0.062476199120283127, };
const TfArray<1, int> tensor_dimension9 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data10[2] = { -1, 208, };
const TfArray<1, int> tensor_dimension10 = { 1, { 2 } };
const ALIGN(16) float tensor_data11[2*208] = { 
  -0.30943897366523743, -0.030958224087953568, -0.051400251686573029, -0.074570618569850922, 0.22546543180942535, 0.040510140359401703, -0.27542814612388611, -0.10592756420373917, -0.18195024132728577, 0.15968069434165955, -0.10356377065181732, -0.34148404002189636, -0.18102081120014191, 0.2020353227853775, -0.32422599196434021, 0.032440122216939926, 0.037228897213935852, 0.10255774855613708, 0.094082430005073547, -0.31271693110466003, 0.23561652004718781, 0.084415219724178314, -0.20072852075099945, 0.063073568046092987, -0.10492245107889175, 0.10101310163736343, -0.021909771487116814, -0.11300240457057953, 0.045819491147994995, 0.30337601900100708, -0.084774404764175415, 0.14869023859500885, -0.11588415503501892, -0.045700032263994217, 0.079007923603057861, -0.30912455916404724, 0.13793957233428955, 0.041756957769393921, -0.095012485980987549, 0.14932669699192047, -0.15017233788967133, 0.13817225396633148, -0.47101509571075439, -0.23070399463176727, -0.047127921134233475, 0.20060083270072937, -0.071042805910110474, 0.0047593326307833195, -0.10077061504125595, -0.045601148158311844, 0.11469192802906036, -0.30443465709686279, 0.34462210536003113, -0.093220964074134827, -0.0080521125346422195, -0.017097499221563339, -0.2497546374797821, -0.13421925902366638, 0.15470242500305176, -0.059708006680011749, -0.1498563140630722, 0.22444765269756317, -0.17793132364749908, 0.14030943810939789, -0.18000777065753937, 0.029152777045965195, 0.08112044632434845, -0.16960030794143677, 0.0063291937112808228, 0.090527795255184174, -0.15398992598056793, 0.13564261794090271, -0.08077424019575119, 0.087156042456626892, -0.024400658905506134, -0.26218369603157043, 0.087227463722229004, 0.056467402726411819, -0.050932884216308594, 0.18562455475330353, -0.20435729622840881, 0.085997901856899261, -0.10575348883867264, -0.12887924909591675, 0.15980519354343414, 0.064715258777141571, -0.023841854184865952, 0.022111253812909126, 0.025915803387761116, 0.035795163363218307, -0.084564939141273499, -0.079009726643562317, 0.16332651674747467, -0.031410455703735352, -0.17719095945358276, 0.15778021514415741, -0.072609670460224152, 0.016572244465351105, 0.1519671231508255, -0.16078826785087585, 0.13675582408905029, 0.11120433360338211, -0.068593382835388184, -0.028519012033939362, -0.10371322929859161, 0.067163556814193726, -0.15340465307235718, -0.1330755203962326, 0.0076379906386137009, 0.04885372519493103, -0.093500413000583649, 0.052109599113464355, -0.19893451035022736, 0.18291452527046204, -0.04751620814204216, -0.077516034245491028, 0.23569236695766449, 0.13531610369682312, -0.048327591270208359, -0.058554809540510178, -0.12560220062732697, -0.0066936812363564968, -0.16012024879455566, -0.077427171170711517, 0.17769736051559448, -0.03457937017083168, 0.076102592051029205, 0.12735345959663391, -0.11476802825927734, 0.065399058163166046, -0.081689000129699707, -0.18160094320774078, 0.26322430372238159, 0.15761652588844299, -0.00053180172108113766, 0.042606066912412643, -0.2277451753616333, 0.13272705674171448, 0.12040634453296661, -0.046915609389543533, 0.091770410537719727, 0.1570887416601181, -0.15340529382228851, 0.17266935110092163, -0.18900962173938751, -0.04166465625166893, -0.050742063671350479, -0.047356441617012024, 0.16982780396938324, 0.1932864785194397, 0.11812399327754974, 0.16921517252922058, -0.18046835064888, 0.043955158442258835, -0.048111677169799805, -0.031277835369110107, 0.20921105146408081, 0.22231520712375641, -0.18377278745174408, 0.093260660767555237, -0.21903325617313385, 0.1177404522895813, 0.00075088831363245845, -0.21700632572174072, -0.053041171282529831, 0.023509645834565163, 0.03388899564743042, 0.22268727421760559, -0.080621860921382904, -0.056126158684492111, -0.094347074627876282, -0.13880397379398346, 0.29382047057151794, 0.22332954406738281, -0.059246513992547989, 0.017749004065990448, -0.048694342374801636, -0.090564869344234467, 0.22641132771968842, -0.17729668319225311, -0.0088450657203793526, 0.12271171808242798, -0.17330718040466309, -0.0032891910523176193, -0.11745791137218475, -0.29911068081855774, -0.19802446663379669, -0.24010816216468811, -0.072852879762649536, 0.12159591913223267, -0.27167412638664246, -0.060788370668888092, -0.27014908194541931, 0.11716985702514648, -0.059285495430231094, -0.32504773139953613, 0.067612849175930023, -0.10160642117261887, -0.0393509641289711, -0.053710021078586578, -0.23223534226417542, 0.022404521703720093, 0.01709042489528656, -0.17184694111347198, 0.065321922302246094, -0.082167774438858032, -0.3497331440448761, 0.22813005745410919, 
  0.4998106062412262, -0.085815079510211945, 0.11737854778766632, 0.18631848692893982, -0.18900421261787415, -0.14715881645679474, 0.059994451701641083, 0.036981154233217239, 0.069123528897762299, 0.0066071930341422558, -0.16393528878688812, 0.13523390889167786, 0.031049171462655067, 0.071314215660095215, 0.33518382906913757, 0.0068441699258983135, 0.067603632807731628, -0.14919212460517883, 0.0037340119015425444, 0.055313192307949066, -0.030417494475841522, -0.052413422614336014, 0.22612099349498749, 0.074635691940784454, 0.13431313633918762, -0.25054639577865601, 0.13984762132167816, 0.042473860085010529, 0.012830102816224098, -0.10047081857919693, 0.018842106685042381, 0.14497661590576172, 0.17275545001029968, 0.22696369886398315, 0.031972993165254593, 0.11153788864612579, -0.23026874661445618, -0.34497076272964478, 0.24953852593898773, 0.1121072918176651, 0.079387478530406952, 0.12353609502315521, 0.30733692646026611, 0.21470604836940765, -0.040694460272789001, -0.028227685019373894, -0.077647171914577484, -0.057471632957458496, 0.2442944198846817, -0.060487017035484314, -0.0512271448969841, 0.050543054938316345, -0.28014370799064636, 0.067677587270736694, 0.23690436780452728, -0.1325383335351944, 0.16458319127559662, -0.14079968631267548, 0.082516007125377655, 0.18683142960071564, 0.088552080094814301, -0.33534705638885498, -0.032208792865276337, -0.20067030191421509, 0.22333922982215881, 0.01684914343059063, -0.074351340532302856, 0.19632130861282349, -0.072303041815757751, -0.040991075336933136, -0.0079725524410605431, -0.1592390239238739, 0.14267370104789734, -0.061624515801668167, -0.12175802886486053, 0.076303474605083466, -0.22959324717521667, -0.085069656372070312, 0.071065329015254974, -0.23929987847805023, 0.11347438395023346, -0.14100667834281921, 0.027056023478507996, 0.14740698039531708, -0.17599357664585114, -0.18780678510665894, 0.15021201968193054, -0.028637431561946869, -0.079767391085624695, -0.0083253374323248863, 0.16361215710639954, 0.1448628157377243, -0.20004840195178986, -0.074640169739723206, -0.062554389238357544, -0.12339649349451065, 0.23325264453887939, 0.14850109815597534, 0.070690587162971497, 0.14436444640159607, 0.05376618355512619, -0.075566865503787994, 0.08374350517988205, 0.12979215383529663, 0.0028569914866238832, 0.087877221405506134, -0.028884021565318108, 0.24987828731536865, -0.17008654773235321, -0.12274643778800964, 0.068144671618938446, -0.17496755719184875, 0.16647803783416748, -0.027412720024585724, -0.012986687012016773, 0.241283118724823, -0.021639492362737656, -0.17223665118217468, 0.051932137459516525, -0.24745316803455353, 0.0028079117182642221, -0.25189566612243652, 0.17482404410839081, 0.17347022891044617, -0.019288644194602966, -0.1462651789188385, 0.16474643349647522, -0.30997323989868164, 0.033750139176845551, 0.0083074579015374184, -0.051546730101108551, 0.28542709350585938, -0.24039436876773834, -0.015335086733102798, 0.15765918791294098, -0.1562923789024353, 0.052066374570131302, -0.094307884573936462, -0.14143276214599609, 0.18354383111000061, 0.099683396518230438, -0.13132816553115845, -0.0074545633979141712, -0.096373945474624634, 0.048275947570800781, -0.11244145035743713, -0.028687510639429092, 0.2242518812417984, -0.094370417296886444, 0.045392177999019623, -0.32878297567367554, -0.035548925399780273, 0.22695279121398926, -0.23177050054073334, 0.16999286413192749, -0.037876103073358536, -0.18334589898586273, -0.17402338981628418, 0.029336040839552879, -0.25507631897926331, 0.081243284046649933, -0.15473002195358276, -0.052601173520088196, 0.29210004210472107, -0.070950232446193695, -0.15574604272842407, 0.09683961421251297, 0.036311879754066467, 0.0014482068363577127, 0.08576558530330658, -0.10253202170133591, 0.23768152296543121, -0.27727675437927246, -0.26815766096115112, 0.20413726568222046, -0.086636275053024292, 0.25290113687515259, 0.057991981506347656, -0.011962576769292355, 0.26860007643699646, 0.088215172290802002, -0.10951942950487137, 0.13362248241901398, -0.05553426593542099, 0.026029575616121292, 0.018036371096968651, 0.12979313731193542, 0.096966028213500977, 0.025847980752587318, -0.059545028954744339, 0.024134188890457153, -0.23589913547039032, 0.2632678747177124, -0.13621033728122711, 0.17710784077644348, 0.12083356082439423, 0.099894799292087555, 0.03098592720925808, 0.091577045619487762, -0.010338842868804932, 0.16466625034809113, -0.09584382176399231, 0.067086845636367798, -0.026693986728787422, -0.04040183499455452, -0.17197129130363464, 0.23759552836418152, -0.22898335754871368, 
};
const TfArray<2, int> tensor_dimension11 = { 2, { 2,208 } };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,50,13 } };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,50,8 } };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,50,1,8 } };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,25,1,8 } };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,25,8 } };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,25,16 } };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,25,1,16 } };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,13,1,16 } };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,208 } };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,2 } };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,2 } };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,3 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,7,1 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,4 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,5 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,8,2 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,6 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,10 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,11,9 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 2608), (TfLiteIntArray*)&g0::tensor_dimension0, 2600, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 64, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 16, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 16, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 16, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1248, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 1536, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 8, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 8, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 1664, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 2600, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 2608), (TfLiteIntArray*)&g0::tensor_dimension13, 1600, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 1600, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 1600), (TfLiteIntArray*)&g0::tensor_dimension15, 800, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 800, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 1600), (TfLiteIntArray*)&g0::tensor_dimension17, 1600, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension18, 1600, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 1600), (TfLiteIntArray*)&g0::tensor_dimension19, 832, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension20, 832, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 832), (TfLiteIntArray*)&g0::tensor_dimension21, 8, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension22, 8, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 23, };
const size_t tflNodes_subgraph_index[] = {0, 11, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  22, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization.type = kTfLiteNoQuantization;

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
